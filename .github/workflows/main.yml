name: Build and upload

on: [push]

jobs:
  build:
    strategy:
      matrix:
        target: [knobby, twatch]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v2
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    - name: Run PlatformIO
      run: |
        pio run -e ${{ matrix.target }}
        pio run -e ${{ matrix.target }} -t buildfs
        mkdir upload
        zip -j upload/${{ matrix.target }}-firmware.zip .pio/build/${{ matrix.target }}/*.bin flash.bat flash.sh
    - name: Archive firmware artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.target }}-firmware.zip
        path: upload/${{ matrix.target }}-firmware.zip
  upload:
    if: github.repository_owner == 'quadule'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        path: ~/artifacts
    - name: Merge artifacts
      run: |
        mkdir upload
        cd upload
        mv ~/artifacts/*/* .
        unzip -p knobby-firmware.zip firmware.bin > knobby.bin
        unzip -p twatch-firmware.zip firmware.bin > twatch.bin
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Upload branch firmware to S3
      if: github.ref_type == 'branch'
      run:
        aws s3 cp
          --acl public-read
          --metadata "{\"git-version\":\"$(git describe --match="" --dirty --always)\"}"
          --recursive
          upload
          s3://knobby/firmware/${{ github.ref_name }}/
    - name: Upload release firmware to S3
      if: github.ref_type == 'tag'
      run:
        aws s3 cp
          --acl public-read
          --metadata "{\"git-version\":\"$(git describe --match="" --dirty --always)\"}"
          --recursive
          upload
          s3://knobby/firmware/
    - name: Draft release
      uses: softprops/action-gh-release@v1
      if: github.ref_type == 'tag'
      with:
        draft: true
        files: upload/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
